<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://www.w3.org/1999/xlink" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.w3.org/1999/xlink" elementFormDefault="unqualified" attributeFormDefault="qualified">
	<xsd:attribute name="actuate">
		<xsd:simpleType>
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="onLoad"/>
				<xsd:enumeration value="onRequest"/>
				<xsd:enumeration value="other"/>
				<xsd:enumeration value="none"/>
			</xsd:restriction>
		</xsd:simpleType>
	</xsd:attribute>
	<xsd:attribute name="arcrole" type="xsd:string">
		<xsd:annotation>
			<xsd:documentation>The string datatype represents character strings in XML. The ·value space· of string is the set of finite-length sequences of characters (as defined in [XML 1.0 (Second Edition)]) that ·match· the Char production from [XML 1.0 (Second Edition)]. A character is an atomic unit of communication; it is not further specified except to note that every character has a corresponding Universal Character Set code point, which is an integer. &#xD;
&#xD;
Note:  Many human languages have writing systems that require child elements for control of aspects such as bidirectional formating or ruby annotation (see [Ruby] and Section 8.2.4 Overriding the bidirectional algorithm: the BDO element of [HTML 4.01]). Thus, string, as a simple type that can contain only characters but not child elements, is often not suitable for representing text. In such situations, a complex type that allows mixed content should be considered. For more information, see Section 5.5 Any Element, Any Attribute of [XML Schema Language: Part 0 Primer]. &#xD;
&#xD;
Note:  As noted in ordered, the fact that this specification does not specify an ·order-relation· for ·string· does not preclude other applications from treating strings as being ordered. &#xD;
&#xD;
2]    Char    ::=    #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]  /* any Unicode character, excluding the surrogate blocks, FFFE, and FFFF. */</xsd:documentation>
		</xsd:annotation>
	</xsd:attribute>
	<xsd:attribute name="from" type="xsd:string">
		<xsd:annotation>
			<xsd:documentation>The string datatype represents character strings in XML. The ·value space· of string is the set of finite-length sequences of characters (as defined in [XML 1.0 (Second Edition)]) that ·match· the Char production from [XML 1.0 (Second Edition)]. A character is an atomic unit of communication; it is not further specified except to note that every character has a corresponding Universal Character Set code point, which is an integer. &#xD;
&#xD;
Note:  Many human languages have writing systems that require child elements for control of aspects such as bidirectional formating or ruby annotation (see [Ruby] and Section 8.2.4 Overriding the bidirectional algorithm: the BDO element of [HTML 4.01]). Thus, string, as a simple type that can contain only characters but not child elements, is often not suitable for representing text. In such situations, a complex type that allows mixed content should be considered. For more information, see Section 5.5 Any Element, Any Attribute of [XML Schema Language: Part 0 Primer]. &#xD;
&#xD;
Note:  As noted in ordered, the fact that this specification does not specify an ·order-relation· for ·string· does not preclude other applications from treating strings as being ordered. &#xD;
&#xD;
2]    Char    ::=    #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]  /* any Unicode character, excluding the surrogate blocks, FFFE, and FFFF. */</xsd:documentation>
		</xsd:annotation>
	</xsd:attribute>
	<xsd:attribute name="href" type="xsd:anyURI"/>
	<xsd:attribute name="label" type="xsd:NMTOKEN">
		<xsd:annotation>
			<xsd:documentation>NMTOKEN represents the NMTOKEN attribute type from [XML 1.0 (Second Edition)]. The ·value space· of NMTOKEN is the set of tokens that ·match· the Nmtoken production in [XML 1.0 (Second Edition)]. The ·lexical space· of NMTOKEN is the set of strings that ·match· the Nmtoken production in [XML 1.0 (Second Edition)]. The ·base type· of NMTOKEN is token. &#xD;
&#xD;
For compatibility (see Terminology (§1.4)) NMTOKEN should be used only on attributes. &#xD;
&#xD;
An Nmtoken (name token) is any mixture of name characters.&#xD;
&#xD;
Names and Tokens&#xD;
[4]     NameChar    ::=     Letter | Digit | '.' | '-' | '_' | ':' | CombiningChar | Extender</xsd:documentation>
		</xsd:annotation>
	</xsd:attribute>
	<xsd:attribute name="role" type="xsd:string">
		<xsd:annotation>
			<xsd:documentation>The string datatype represents character strings in XML. The ·value space· of string is the set of finite-length sequences of characters (as defined in [XML 1.0 (Second Edition)]) that ·match· the Char production from [XML 1.0 (Second Edition)]. A character is an atomic unit of communication; it is not further specified except to note that every character has a corresponding Universal Character Set code point, which is an integer. &#xD;
&#xD;
Note:  Many human languages have writing systems that require child elements for control of aspects such as bidirectional formating or ruby annotation (see [Ruby] and Section 8.2.4 Overriding the bidirectional algorithm: the BDO element of [HTML 4.01]). Thus, string, as a simple type that can contain only characters but not child elements, is often not suitable for representing text. In such situations, a complex type that allows mixed content should be considered. For more information, see Section 5.5 Any Element, Any Attribute of [XML Schema Language: Part 0 Primer]. &#xD;
&#xD;
Note:  As noted in ordered, the fact that this specification does not specify an ·order-relation· for ·string· does not preclude other applications from treating strings as being ordered. &#xD;
&#xD;
2]    Char    ::=    #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]  /* any Unicode character, excluding the surrogate blocks, FFFE, and FFFF. */</xsd:documentation>
		</xsd:annotation>
	</xsd:attribute>
	<xsd:attribute name="show">
		<xsd:simpleType>
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="new"/>
				<xsd:enumeration value="replace"/>
				<xsd:enumeration value="embed"/>
				<xsd:enumeration value="other"/>
				<xsd:enumeration value="none"/>
			</xsd:restriction>
		</xsd:simpleType>
	</xsd:attribute>
	<xsd:attribute name="title" type="xsd:string">
		<xsd:annotation>
			<xsd:documentation>The string datatype represents character strings in XML. The ·value space· of string is the set of finite-length sequences of characters (as defined in [XML 1.0 (Second Edition)]) that ·match· the Char production from [XML 1.0 (Second Edition)]. A character is an atomic unit of communication; it is not further specified except to note that every character has a corresponding Universal Character Set code point, which is an integer. &#xD;
&#xD;
Note:  Many human languages have writing systems that require child elements for control of aspects such as bidirectional formating or ruby annotation (see [Ruby] and Section 8.2.4 Overriding the bidirectional algorithm: the BDO element of [HTML 4.01]). Thus, string, as a simple type that can contain only characters but not child elements, is often not suitable for representing text. In such situations, a complex type that allows mixed content should be considered. For more information, see Section 5.5 Any Element, Any Attribute of [XML Schema Language: Part 0 Primer]. &#xD;
&#xD;
Note:  As noted in ordered, the fact that this specification does not specify an ·order-relation· for ·string· does not preclude other applications from treating strings as being ordered. &#xD;
&#xD;
2]    Char    ::=    #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]  /* any Unicode character, excluding the surrogate blocks, FFFE, and FFFF. */</xsd:documentation>
		</xsd:annotation>
	</xsd:attribute>
	<xsd:attribute name="to" type="xsd:string">
		<xsd:annotation>
			<xsd:documentation>The string datatype represents character strings in XML. The ·value space· of string is the set of finite-length sequences of characters (as defined in [XML 1.0 (Second Edition)]) that ·match· the Char production from [XML 1.0 (Second Edition)]. A character is an atomic unit of communication; it is not further specified except to note that every character has a corresponding Universal Character Set code point, which is an integer. &#xD;
&#xD;
Note:  Many human languages have writing systems that require child elements for control of aspects such as bidirectional formating or ruby annotation (see [Ruby] and Section 8.2.4 Overriding the bidirectional algorithm: the BDO element of [HTML 4.01]). Thus, string, as a simple type that can contain only characters but not child elements, is often not suitable for representing text. In such situations, a complex type that allows mixed content should be considered. For more information, see Section 5.5 Any Element, Any Attribute of [XML Schema Language: Part 0 Primer]. &#xD;
&#xD;
Note:  As noted in ordered, the fact that this specification does not specify an ·order-relation· for ·string· does not preclude other applications from treating strings as being ordered. &#xD;
&#xD;
2]    Char    ::=    #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]  /* any Unicode character, excluding the surrogate blocks, FFFE, and FFFF. */</xsd:documentation>
		</xsd:annotation>
	</xsd:attribute>
	<!--xsd:complexType name="arcLink" abstract="false" mixed="false">
<xsd:attribute name="type" type="xsd:string" use="optional" fixed="arc" form="qualified"/>
<xsd:attribute ref="arcrole" use="optional"/>
<xsd:attribute ref="title" use="optional"/>
<xsd:attribute ref="show" use="optional"/>
<xsd:attribute ref="actuate" use="optional"/>
<xsd:attribute ref="from" use="optional"/>
<xsd:attribute ref="to" use="optional"/>
</xsd:complexType-->
	<xsd:attributeGroup name="arcLink">
		<xsd:annotation>
			<xsd:documentation>An xlink set of attributes that identifies two end points and the kind of relationship they have to each other.</xsd:documentation>
		</xsd:annotation>
		<!--xsd:attribute name="type" type="xsd:string" use="optional" fixed="arc" form="qualified"/-->
		<xsd:attribute name="type" type="MISMOarcLink" use="optional" form="qualified"/>
		<xsd:attribute ref="arcrole" use="optional"/>
		<xsd:attribute ref="title" use="optional"/>
		<xsd:attribute ref="show" use="optional"/>
		<xsd:attribute ref="actuate" use="optional"/>
		<xsd:attribute ref="from" use="optional"/>
		<xsd:attribute ref="to" use="optional"/>
	</xsd:attributeGroup>
	<xsd:simpleType name="MISMOarcLink">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="arc"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:attributeGroup name="resourceLink">
		<xsd:annotation>
			<xsd:documentation>An xlink attribute group for defining the end point of a relationship.</xsd:documentation>
			<xsd:documentation>term: ResourceEndpoint</xsd:documentation>
		</xsd:annotation>
		<!--xsd:attribute name="type" type="xsd:string" use="optional" fixed="resource" form="qualified"/-->
		<xsd:attribute name="type" type="MISMOresourceLink" use="optional" form="qualified"/>
		<xsd:attribute ref="role" use="optional"/>
		<xsd:attribute ref="title" use="optional"/>
		<xsd:attribute ref="label" use="optional"/>
	</xsd:attributeGroup>
	<xsd:simpleType name="MISMOresourceLink">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="resource"/>
		</xsd:restriction>
	</xsd:simpleType>
</xsd:schema>